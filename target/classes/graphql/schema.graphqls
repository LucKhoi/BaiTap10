# GraphQL Schema for Product Management System

# Entity Types
type Category {
    id: ID!
    name: String!
    images: String
    users: [User!]
}

type User {
    id: ID!
    fullname: String!
    email: String!
    phone: String
    products: [Product!]
    categories: [Category!]
}

type Product {
    id: ID!
    title: String!
    quantity: Int!
    description: String
    price: Float!
    images: String
    user: User!
}

# Input Types
input CategoryInput {
    name: String!
    images: String
}

input UserInput {
    fullname: String!
    email: String!
    password: String!
    phone: String
}

input ProductInput {
    title: String!
    quantity: Int!
    description: String
    price: Float!
    images: String
    userId: ID!
}

# Query Root Type
type Query {
    # Category Queries
    categories: [Category!]!
    categoryById(id: ID!): Category
    categoryByName(name: String!): Category
    searchCategories(name: String!): [Category!]!
    categoriesByUser(userId: ID!): [Category!]!
    
    # User Queries
    users: [User!]!
    userById(id: ID!): User
    userByEmail(email: String!): User
    searchUsers(name: String!): [User!]!
    usersByCategory(categoryId: ID!): [User!]!
    
    # Product Queries
    products: [Product!]!
    productById(id: ID!): Product
    productsByUser(userId: ID!): [Product!]!
    searchProducts(title: String, minPrice: Float, maxPrice: Float, userId: ID): [Product!]!
    lowStockProducts(threshold: Int): [Product!]!
    productsByPriceAsc: [Product!]!
    productsByPriceDesc: [Product!]!
    productsByCategory(categoryId: ID!): [Product!]!
    productsByCategoryOrderByPrice(categoryId: ID!): [Product!]!
}

# Mutation Root Type
type Mutation {
    # Category Mutations
    createCategory(input: CategoryInput!): Category!
    updateCategory(id: ID!, input: CategoryInput!): Category!
    deleteCategory(id: ID!): Boolean!
    
    # User Mutations
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
    deleteUser(id: ID!): Boolean!
    addCategoriesToUser(userId: ID!, categoryIds: [ID!]!): User!
    removeCategoryFromUser(userId: ID!, categoryId: ID!): User!
    
    # Product Mutations
    createProduct(input: ProductInput!): Product!
    updateProduct(id: ID!, input: ProductInput!): Product!
    deleteProduct(id: ID!): Boolean!
    updateProductQuantity(id: ID!, quantity: Int!): Product!
}